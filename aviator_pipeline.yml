groups:
- jobs:
  - management-dev
  - management
  name: master
- jobs:
  - dataworks-ingress_sft-agent-pr
  name: pull-request
- jobs:
  - mirror-dwpdigital-dataworks-ingress_sft-agent-dev
  - mirror-dwpdigital-dataworks-ingress_sft-agent
  name: mirror
jobs:
- max_in_flight: 1
  name: management-dev
  plan:
  - get: dataworks-ingress_sft-agent
    trigger: true
  - config:
      image_resource:
        source:
          repository: ((dataworks.docker_awscli_repository))
          tag: ((dataworks.docker_awscli_version))
          version: ((dataworks.docker_awscli_version))
        type: docker-image
      inputs:
      - name: dataworks-ingress_sft-agent
      outputs:
      - name: terraform-bootstrap
      params:
        AWS_REGION: ((dataworks.aws_region))
      platform: linux
      run:
        args:
        - -exc
        - |
          python bootstrap_terraform.py
          cp terraform.tf ../terraform-bootstrap
        dir: dataworks-ingress_sft-agent
        path: sh
    task: terraform-bootstrap
  - config:
      image_resource:
        source:
          repository: ((dataworks.terraform_repository))
          tag: ((dataworks.terraform_14_version))
        type: docker-image
      inputs:
      - name: dataworks-ingress_sft-agent
      - name: terraform-bootstrap
      params:
        TF_CLI_ARGS_apply: -lock-timeout=300s
        TF_CLI_ARGS_plan: -lock-timeout=300s
        TF_INPUT: false
        TF_VAR_costcode: ((dataworks.costcode))
      platform: linux
      run:
        args:
        - -exc
        - |
          cp ../terraform-bootstrap/terraform.tf .
          terraform workspace show
          terraform init
          terraform plan -out terraform.plan
          terraform apply -auto-approve terraform.plan
        dir: dataworks-ingress_sft-agent
        path: sh
    task: terraform-apply
  - config:
      image_resource:
        source:
          repository: ((dataworks.terraform_repository))
          tag: ((dataworks.terraform_14_version))
        type: docker-image
      inputs:
      - name: dataworks-ingress_sft-agent
      - name: terraform-bootstrap
      params:
        TF_CLI_ARGS_apply: -lock-timeout=300s
        TF_CLI_ARGS_plan: -lock-timeout=300s
        TF_INPUT: false
        TF_VAR_costcode: ((dataworks.costcode))
      platform: linux
      run:
        args:
        - -exc
        - |
          cp ../terraform-bootstrap/terraform.tf .
          terraform workspace show
          terraform init
          terraform plan $DETAILED_EXITCODE
        dir: dataworks-ingress_sft-agent
        path: sh
    params:
      DETAILED_EXITCODE: -detailed-exitcode
    task: terraform-plan
- max_in_flight: 1
  name: management
  plan:
  - get: dataworks-ingress_sft-agent
    passed:
    - management-dev
    trigger: true
  - config:
      image_resource:
        source:
          repository: ((dataworks.docker_awscli_repository))
          tag: ((dataworks.docker_awscli_version))
          version: ((dataworks.docker_awscli_version))
        type: docker-image
      inputs:
      - name: dataworks-ingress_sft-agent
      outputs:
      - name: terraform-bootstrap
      params:
        AWS_REGION: ((dataworks.aws_region))
      platform: linux
      run:
        args:
        - -exc
        - |
          python bootstrap_terraform.py
          cp terraform.tf ../terraform-bootstrap
        dir: dataworks-ingress_sft-agent
        path: sh
    task: terraform-bootstrap
  - config:
      image_resource:
        source:
          repository: ((dataworks.terraform_repository))
          tag: ((dataworks.terraform_14_version))
        type: docker-image
      inputs:
      - name: dataworks-ingress_sft-agent
      - name: terraform-bootstrap
      params:
        TF_CLI_ARGS_apply: -lock-timeout=300s
        TF_CLI_ARGS_plan: -lock-timeout=300s
        TF_INPUT: false
        TF_VAR_costcode: ((dataworks.costcode))
      platform: linux
      run:
        args:
        - -exc
        - |
          cp ../terraform-bootstrap/terraform.tf .
          terraform workspace show
          terraform init
          terraform plan -out terraform.plan
          terraform apply -auto-approve terraform.plan
        dir: dataworks-ingress_sft-agent
        path: sh
    params:
      TF_WORKSPACE: management
    task: terraform-apply
  - config:
      image_resource:
        source:
          repository: ((dataworks.terraform_repository))
          tag: ((dataworks.terraform_14_version))
        type: docker-image
      inputs:
      - name: dataworks-ingress_sft-agent
      - name: terraform-bootstrap
      params:
        TF_CLI_ARGS_apply: -lock-timeout=300s
        TF_CLI_ARGS_plan: -lock-timeout=300s
        TF_INPUT: false
        TF_VAR_costcode: ((dataworks.costcode))
      platform: linux
      run:
        args:
        - -exc
        - |
          cp ../terraform-bootstrap/terraform.tf .
          terraform workspace show
          terraform init
          terraform plan $DETAILED_EXITCODE
        dir: dataworks-ingress_sft-agent
        path: sh
    params:
      DETAILED_EXITCODE: -detailed-exitcode
      TF_WORKSPACE: management
    task: terraform-plan
- name: mirror-dwpdigital-dataworks-ingress_sft-agent-dev
  plan:
  - attempts: 3
    get: dwpdigital-dataworks-ingress_sft-agent
    params:
      format: oci
    trigger: true
  - attempts: 3
    params:
      image: dwpdigital-dataworks-ingress-sft-agent/image.tar
    put: ecr-dwpdigital-dataworks-ingress_sft-agent-dev
  serial_groups:
  - dataworks-ingress_sft-agent
- name: mirror-dwpdigital-dataworks-ingress_sft-agent
  plan:
  - attempts: 3
    get: dwpdigital-dataworks-ingress_sft-agent
    params:
      format: oci
    trigger: true
  - attempts: 3
    params:
      image: dwpdigital-dataworks-ingress-sft-agent/image.tar
    put: ecr-dwpdigital-dataworks-ingress_sft-agent
  serial_groups:
  - dataworks-ingress_sft-agent
- name: dataworks-ingress_sft-agent-pr
  plan:
  - get: dataworks-ingress_sft-agent-pr
    trigger: true
    version: every
  - params:
      path: dataworks-ingress_sft-agent-pr
      status: pending
    put: dataworks-ingress_sft-agent-pr
  - config:
      image_resource:
        source:
          repository: ((dataworks.docker_awscli_repository))
          tag: ((dataworks.docker_awscli_version))
          version: ((dataworks.docker_awscli_version))
        type: docker-image
      inputs:
      - name: dataworks-ingress_sft-agent
      outputs:
      - name: terraform-bootstrap
      params:
        AWS_REGION: ((dataworks.aws_region))
      platform: linux
      run:
        args:
        - -exc
        - |
          python bootstrap_terraform.py
          cp terraform.tf ../terraform-bootstrap
        dir: dataworks-ingress_sft-agent
        path: sh
    input_mapping:
      dataworks-ingress_sft-agent: dataworks-ingress_sft-agent-pr
    task: terraform-bootstrap
  - config:
      image_resource:
        source:
          repository: ((dataworks.terraform_repository))
          tag: ((dataworks.terraform_14_version))
        type: docker-image
      inputs:
      - name: dataworks-ingress_sft-agent
      - name: terraform-bootstrap
      params:
        TF_CLI_ARGS_apply: -lock-timeout=300s
        TF_CLI_ARGS_plan: -lock-timeout=300s
        TF_INPUT: false
        TF_VAR_costcode: ((dataworks.costcode))
      platform: linux
      run:
        args:
        - -exc
        - |
          cp ../terraform-bootstrap/terraform.tf .
          terraform workspace show
          terraform init
          terraform plan $DETAILED_EXITCODE
        dir: dataworks-ingress_sft-agent
        path: sh
    input_mapping:
      dataworks-ingress_sft-agent: dataworks-ingress_sft-agent-pr
    on_failure:
      params:
        path: dataworks-ingress_sft-agent-pr
        status: failure
      put: dataworks-ingress_sft-agent-pr
    on_success:
      params:
        path: dataworks-ingress_sft-agent-pr
        status: success
      put: dataworks-ingress_sft-agent-pr
    params:
      DETAILED_EXITCODE: ""
      TF_WORKSPACE: management
    task: terraform-plan
resource_types:
- name: pull-request
  source:
    repository: teliaoss/github-pr-resource
    tag: latest
  type: docker-image
- name: registry-image-resource
  source:
    repository: dwpdigital/registry-image-resource
    tag: latest
  type: docker-image
resources:
- check_every: 720h
  name: dataworks-ingress_sft-agent-pr
  source:
    access_token: ((dataworks-secrets.concourse_github_pat))
    repository: dwp/dataworks-ingress_sft-agent
  type: pull-request
  webhook_token: ((dataworks.concourse_github_webhook_token))
- check_every: 720h
  name: dataworks-ingress_sft-agent
  source:
    access_token: ((dataworks-secrets.concourse_github_pat))
    branch: master
    uri: https://github.com/dwp/dataworks-ingress_sft-agent.git
  type: git
  webhook_token: ((dataworks.concourse_github_webhook_token))
- check_every: 5m
  name: dwpdigital-dataworks-ingress_sft-agent
  source:
    repository: dwpdigital/dataworks-ingress_sft-agent
  type: registry-image-resource
- name: ecr-dwpdigital-dataworks-ingress_sft-agent-dev
  source:
    aws_access_key_id: ((dataworks-secrets.ci_aws_access_key_id))
    aws_region: ((dataworks.aws_region))
    aws_role_arn: arn:aws:iam::((dataworks.aws_management_dev_acc)):role/ci
    aws_secret_access_key: ((dataworks-secrets.ci_aws_secret_access_key))
    repository: dataworks-ingress-sft-agent
  type: registry-image-resource
- name: ecr-dwpdigital-dataworks-ingress_sft-agent
  source:
    aws_access_key_id: ((dataworks-secrets.ci_aws_access_key_id))
    aws_region: ((dataworks.aws_region))
    aws_role_arn: arn:aws:iam::((dataworks.aws_management_acc)):role/ci
    aws_secret_access_key: ((dataworks-secrets.ci_aws_secret_access_key))
    repository: dataworks-ingress-sft-agent
  type: registry-image-resource
